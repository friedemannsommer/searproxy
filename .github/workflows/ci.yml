name: Rust continuous integration

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
    paths:
      - "src/**"
      - "Cargo.toml"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: "*"
    paths:
      - "src/**"
      - "Cargo.toml"
      - ".github/workflows/ci.yml"

permissions:
  actions: none
  checks: none
  contents: read
  deployments: none
  id-token: none
  issues: none
  packages: none
  pages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: none

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
      - name: Rust cache
        uses: Swatinem/rust-cache@v1
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
      - name: Rust cache
        uses: Swatinem/rust-cache@v1
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: check

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          components: rustfmt
      - name: Rust cache
        uses: Swatinem/rust-cache@v1
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          components: clippy
      - name: Rust cache
        uses: Swatinem/rust-cache@v1
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build-release:
    name: "Build release"
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
    needs:
      - test
      - check
      - fmt
      - clippy
    strategy:
      matrix:
        target:
          - "aarch64-unknown-linux-musl"
          - "x86_64-unknown-linux-musl"
    steps:
      - uses: actions/checkout@v3
      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          target: ${{ matrix.target }}
      - name: Rust cache
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --target ${{ matrix.target }} --release
      - uses: actions/upload-artifact@v2
        with:
          name: "SearProxy_${{ matrix.target }}"
          path: "target/${{ matrix.target }}/release/searproxy"
          retention-days: 1

  release:
    name: "Create release"
    runs-on: ubuntu-latest
    needs:
      - "build-release"
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
        id: download
        with:
          path: artifact-binaries
      - name: Rename files
        run: |
          TARGETS=('aarch64-unknown-linux-musl' 'x86_64-unknown-linux-musl')
          mkdir release-binaries
          for target in "${TARGETS[@]}"; do
            mv "${{steps.download.outputs.download-path}}/SearProxy_$target/searproxy" "./release-binaries/searproxy_$target"
          done
      - name: Create release
        uses: "softprops/action-gh-release@v1"
        with:
          generate_release_notes: true
          draft: true
          files: |
            release-binaries/*
